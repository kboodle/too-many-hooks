{"version":3,"file":"UseFlexCorners.stories-c206ddc2.js","sources":["../../src/stories/UseFlexCorners/Apps.tsx","../../src/stories/UseFlexCorners/Apps.tsx?raw","../../src/stories/UseFlexCorners/stories.tsx","../../../too-many-hooks/dist/useFlexCorners.d.ts?raw","../../src/stories/UseFlexCorners/UseFlexCorners.stories.mdx"],"sourcesContent":["import React, { useMemo } from 'react'\nimport { useFlexCorners } from 'too-many-hooks'\n\ninterface Props {\n  itemCount: number\n  flexWrap: React.CSSProperties['flexWrap']\n  flexDirection: React.CSSProperties['flexDirection']\n  justifyContent: React.CSSProperties['justifyContent']\n  alignItems: React.CSSProperties['alignItems']\n  alignContent: React.CSSProperties['alignContent']\n}\n\nconst Apps: React.FC<Props> = ({\n  itemCount,\n  flexWrap,\n  flexDirection,\n  justifyContent,\n  alignItems,\n  alignContent,\n}) => {\n  const { corners, setElement } = useFlexCorners()\n\n  const renderedItems = useMemo(\n    () =>\n      Array.from({ length: itemCount }, (_, i) => (\n        <div\n          key={`item-${i}`}\n          ref={element => element && setElement(i, element)}\n          className={`flex h-16 ${\n            (i + 1) % 5 === 0 ? '[width:8.25rem]' : 'w-16'\n          } items-center justify-center bg-blue-700 p-1 text-white  \n        ${\n          i === corners?.top.left.index || i === corners?.left.top.index\n            ? 'rounded-tl-3xl bg-emerald-500'\n            : ''\n        } \n        ${\n          i === corners?.top.right.index || i === corners?.right.top.index\n            ? 'rounded-tr-3xl bg-emerald-500'\n            : ''\n        }\n        ${\n          i === corners?.bottom.right.index || i === corners?.right.bottom.index\n            ? 'rounded-br-3xl bg-emerald-500'\n            : ''\n        }\n        ${\n          i === corners?.bottom.left.index || i === corners?.left.bottom.index\n            ? 'rounded-bl-3xl bg-emerald-500'\n            : ''\n        }\n      \n        `}\n        />\n      )),\n    [\n      itemCount,\n      corners?.top.left.index,\n      corners?.top.right.index,\n      corners?.left.top.index,\n      corners?.left.bottom.index,\n      corners?.right.top.index,\n      corners?.right.bottom.index,\n      corners?.bottom.right.index,\n      corners?.bottom.left.index,\n      setElement,\n    ],\n  )\n\n  return (\n    <div className=\"flex h-screen w-screen content-center items-center justify-center bg-white p-8\">\n      <div\n        className={`flex resize gap-1 overflow-auto border-2 border-gray-400 p-2 [height:30rem] [width:18.1rem]`}\n        style={{\n          flexWrap,\n          flexDirection,\n          justifyContent,\n          alignItems,\n          alignContent,\n        }}\n      >\n        {renderedItems}\n      </div>\n    </div>\n  )\n}\n\nexport default Apps\n","export default \"import React, { useMemo } from 'react'\\nimport { useFlexCorners } from 'too-many-hooks'\\n\\ninterface Props {\\n  itemCount: number\\n  flexWrap: React.CSSProperties['flexWrap']\\n  flexDirection: React.CSSProperties['flexDirection']\\n  justifyContent: React.CSSProperties['justifyContent']\\n  alignItems: React.CSSProperties['alignItems']\\n  alignContent: React.CSSProperties['alignContent']\\n}\\n\\nconst Apps: React.FC<Props> = ({\\n  itemCount,\\n  flexWrap,\\n  flexDirection,\\n  justifyContent,\\n  alignItems,\\n  alignContent,\\n}) => {\\n  const { corners, setElement } = useFlexCorners()\\n\\n  const renderedItems = useMemo(\\n    () =>\\n      Array.from({ length: itemCount }, (_, i) => (\\n        <div\\n          key={`item-${i}`}\\n          ref={element => element && setElement(i, element)}\\n          className={`flex h-16 ${\\n            (i + 1) % 5 === 0 ? '[width:8.25rem]' : 'w-16'\\n          } items-center justify-center bg-blue-700 p-1 text-white  \\n        ${\\n          i === corners?.top.left.index || i === corners?.left.top.index\\n            ? 'rounded-tl-3xl bg-emerald-500'\\n            : ''\\n        } \\n        ${\\n          i === corners?.top.right.index || i === corners?.right.top.index\\n            ? 'rounded-tr-3xl bg-emerald-500'\\n            : ''\\n        }\\n        ${\\n          i === corners?.bottom.right.index || i === corners?.right.bottom.index\\n            ? 'rounded-br-3xl bg-emerald-500'\\n            : ''\\n        }\\n        ${\\n          i === corners?.bottom.left.index || i === corners?.left.bottom.index\\n            ? 'rounded-bl-3xl bg-emerald-500'\\n            : ''\\n        }\\n      \\n        `}\\n        />\\n      )),\\n    [\\n      itemCount,\\n      corners?.top.left.index,\\n      corners?.top.right.index,\\n      corners?.left.top.index,\\n      corners?.left.bottom.index,\\n      corners?.right.top.index,\\n      corners?.right.bottom.index,\\n      corners?.bottom.right.index,\\n      corners?.bottom.left.index,\\n      setElement,\\n    ],\\n  )\\n\\n  return (\\n    <div className=\\\"flex h-screen w-screen content-center items-center justify-center bg-white p-8\\\">\\n      <div\\n        className={`flex resize gap-1 overflow-auto border-2 border-gray-400 p-2 [height:30rem] [width:18.1rem]`}\\n        style={{\\n          flexWrap,\\n          flexDirection,\\n          justifyContent,\\n          alignItems,\\n          alignContent,\\n        }}\\n      >\\n        {renderedItems}\\n      </div>\\n    </div>\\n  )\\n}\\n\\nexport default Apps\\n\"","import type { Meta, StoryObj } from '@storybook/react'\nimport Apps from './Apps'\nimport APPS_CODE from './Apps.tsx?raw'\n\nexport const apps: StoryObj<Meta<typeof Apps>> = {\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      source: { code: APPS_CODE, language: 'tsx' },\n    },\n  },\n  argTypes: {\n    flexWrap: {\n      options: ['wrap', 'nowrap', 'wrap-reverse'],\n      control: { type: 'select' },\n    },\n    flexDirection: {\n      options: ['row', 'column', 'row-reverse', 'column-reverse'],\n      control: { type: 'select' },\n    },\n    justifyContent: {\n      options: ['start', 'center', 'space-between', 'space-around', 'space-evenly'],\n      control: { type: 'select' },\n    },\n    alignItems: {\n      options: ['stretch', 'center', 'start', 'end'],\n      control: { type: 'select' },\n    },\n    alignContent: {\n      options: ['start', 'center', 'space-between', 'space-around'],\n      control: { type: 'select' },\n    },\n  },\n  args: {\n    itemCount: 15,\n    flexWrap: 'wrap',\n    flexDirection: 'row',\n    justifyContent: 'start',\n    alignItems: 'stretch',\n    alignContent: 'start',\n  },\n  render: args => <Apps {...args} />,\n}\n","export default \"/**\\n * The information returned about an element in a corner position\\n *\\n * @interface Corner\\n * @typedef {Corner}\\n * @template T extends HTMLElement\\n */\\nexport interface Corner<T extends HTMLElement> {\\n    /**\\n     * The index of the element in the array\\n     *\\n     * @type {number}\\n     */\\n    index: number;\\n    /**\\n     * The element itself\\n     *\\n     * @type {T}\\n     */\\n    element: T;\\n    /**\\n     * `true` if the element is hanging. For example, if the top row's leftmost element is not in the leftmost column.\\n     *\\n     * @type {boolean}\\n     */\\n    isHanging: boolean;\\n}\\n/**\\n * The return structure for element position information. There are two dimensions,\\n * where the top-level object name is the primary position ie `left` is the leftmost column, and the\\n * two `Corner`s in that object are the top and bottom elements in that column, even if they are not\\n * in the topmost or bottommost rows\\n *\\n * @interface Corners\\n * @typedef {Corners}\\n * @template T extends HTMLElement\\n */\\nexport interface Corners<T extends HTMLElement> {\\n    /**\\n     * Information about elements contained in the topmost row\\n     *\\n     * @type {{\\n     *  left: Corner<T>\\n     *  right: Corner<T>\\n     * }}\\n     */\\n    top: {\\n        /**\\n         * The leftmost element in the topmost row\\n         *\\n         * @type {Corner<T>}\\n         */\\n        left: Corner<T>;\\n        /**\\n         * The rightmost element in the topmost row\\n         *\\n         * @type {Corner<T>}\\n         */\\n        right: Corner<T>;\\n    };\\n    /**\\n     * Information about elements contained in the rightmost column\\n     *\\n     * @type {{\\n     *  top: Corner<T>\\n     *  bottom: Corner<T>\\n     * }}\\n     */\\n    right: {\\n        /**\\n         * The topmost element in the rightmost column\\n         *\\n         * @type {Corner<T>}\\n         */\\n        top: Corner<T>;\\n        /**\\n         * The bottommost element in the rightmost column\\n         *\\n         * @type {Corner<T>}\\n         */\\n        bottom: Corner<T>;\\n    };\\n    /**\\n     * Information about elements contained in the bottommost row\\n     *\\n     * @type {{\\n     *  left: Corner<T>\\n     *  right: Corner<T>\\n     * }}\\n     */\\n    bottom: {\\n        /**\\n         * The leftmost element in the bottommost row\\n         *\\n         * @type {Corner<T>}\\n         */\\n        left: Corner<T>;\\n        /**\\n         * The rightmost element in the bottommost row\\n         *\\n         * @type {Corner<T>}\\n         */\\n        right: Corner<T>;\\n    };\\n    /**\\n     * Information about elements contained in the leftmost column\\n     *\\n     * @type {{\\n     *  top: Corner<T>\\n     *  bottom: Corner<T>\\n     * }}\\n     */\\n    left: {\\n        /**\\n         * The topmost element in the leftmost column\\n         *\\n         * @type {Corner<T>}\\n         */\\n        top: Corner<T>;\\n        /**\\n         * The bottommost element in the leftmost column\\n         *\\n         * @type {Corner<T>}\\n         */\\n        bottom: Corner<T>;\\n    };\\n}\\n/**\\n * Return values of the `useFlexCorners` hook\\n *\\n * @export\\n * @typedef {UseFlexCornersReturn}\\n */\\nexport interface UseFlexCornersReturn<T extends HTMLElement> {\\n    /**\\n     * Callback ref updater for tracking included elements\\n     *\\n     * @example\\n     * To get corner for an array of strings placed as `div`s\\n     * ```tsx\\n     * <div style={{display: \\\"flex\\\", flexWrap: \\\"wrap\\\"}}>\\n     *   {\\n     *     strings.map((s, i) => <div ref={element => setElement(i, element)}>{s}</div>)\\n     *   }\\n     * </div>\\n     * ```   *\\n     * @type {(index: number, element: T) => void}\\n     */\\n    setElement: (index: number, element: T) => void;\\n    /**\\n     * Information about elements in corner positions\\n     *\\n     * @type {Corners<T>}\\n     */\\n    corners: Corners<T> | null;\\n    /**\\n     * Function to recalculate corners on a resize other than the standard window event\\n     *\\n     * @type {() => void}\\n     */\\n    onResize: () => void;\\n}\\n/**\\n * `useFlexCorners` hook type\\n *\\n * @export\\n * @typedef {UseFlexCorners}\\n * @template T extends HTMLElement\\n */\\nexport declare type UseFlexCorners<T extends HTMLElement> = () => UseFlexCornersReturn<T>;\\n/**\\n * Dynamically locates corner elements of elements positioned with wrapping flex\\n *\\n * @implements {UseFlexCorners}\\n * @template T extends HTMLElement\\n * @returns {UseFlexCornersReturn<T>}\\n */\\ndeclare const useFlexCorners: <T extends HTMLElement>() => UseFlexCornersReturn<T>;\\nexport default useFlexCorners;\\n\"","import { Canvas, Meta, Source, Story } from '@storybook/addon-docs'\nimport * as stories from './stories'\nimport TYPES from '../../../../too-many-hooks/dist/useFlexCorners.d.ts?raw'\n\n<Meta title=\"Example/UseFlexCorners\" />\n\n# useFlexCorners\n\nDynamic selection of elements laid out with wrapping flex, enabling styling elements that are not selectable with CSS alone.\n\n## Types\n\n<Source language=\"ts\" code={TYPES} />\n\n## Examples\n\n### Apps\n\n<Canvas withSource=\"open\">\n  <Story name=\"Apps\" story={stories.apps} />\n</Canvas>\n"],"names":["Apps","itemCount","flexWrap","flexDirection","justifyContent","alignItems","alignContent","corners","setElement","useFlexCorners","renderedItems","useMemo","_","i","jsx","element","APPS_CODE","apps","args","TYPES","MDXContent","props","MDXLayout","_provideComponents","_jsx","_createMdxContent","_components","_jsxs","_Fragment","Meta","Source","Canvas","Story","stories.apps","_apps_","componentMeta","__namedExportsOrder"],"mappings":"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"}