{"version":3,"file":"UseThrottleFunction.stories-1eced2fe.js","sources":["../../src/stories/UseThrottleFunction/API/API.tsx","../../src/stories/UseThrottleFunction/API/API.tsx?raw","../../src/stories/UseThrottleFunction/stories.tsx","../../../too-many-hooks/dist/useThrottleFunction.d.ts?raw","../../src/stories/UseThrottleFunction/UseThrottleFunction.stories.mdx"],"sourcesContent":["import React, { useState } from 'react'\nimport { useThrottleFunction } from 'too-many-hooks'\nimport COUNTRIES from './assets/countries.json'\n\ninterface Props {\n  firstName: string\n  countryCode: keyof typeof COUNTRIES\n}\n\nconst API: React.FC<Props> = ({ firstName, countryCode }) => {\n  const [predictedAge, setPredictedAge] = useState<string>()\n\n  useThrottleFunction(\n    async (params: { name: string; country_id: keyof typeof COUNTRIES }) =>\n      fetch('https://api.agify.io?' + new URLSearchParams(params))\n        .then(res => res.json())\n        .then(data => setPredictedAge(data.age)),\n    2000,\n    { name: firstName, country_id: countryCode },\n  )\n\n  return (\n    <div className=\"prose flex flex-col items-center gap-4 text-4xl\">\n      <p>\n        Enter a name and country in &quot;Controls&quot; to get a predicted age, updated at most\n        every 2 seconds\n      </p>\n      <p>\n        {predictedAge\n          ? `Predicted age: ${predictedAge}`\n          : firstName\n          ? 'No age result for entered name and location'\n          : 'No name entered'}\n      </p>\n    </div>\n  )\n}\n\nexport default API\n","export default \"import React, { useState } from 'react'\\nimport { useThrottleFunction } from 'too-many-hooks'\\nimport COUNTRIES from './assets/countries.json'\\n\\ninterface Props {\\n  firstName: string\\n  countryCode: keyof typeof COUNTRIES\\n}\\n\\nconst API: React.FC<Props> = ({ firstName, countryCode }) => {\\n  const [predictedAge, setPredictedAge] = useState<string>()\\n\\n  useThrottleFunction(\\n    async (params: { name: string; country_id: keyof typeof COUNTRIES }) =>\\n      fetch('https://api.agify.io?' + new URLSearchParams(params))\\n        .then(res => res.json())\\n        .then(data => setPredictedAge(data.age)),\\n    2000,\\n    { name: firstName, country_id: countryCode },\\n  )\\n\\n  return (\\n    <div className=\\\"prose flex flex-col items-center gap-4 text-4xl\\\">\\n      <p>\\n        Enter a name and country in &quot;Controls&quot; to get a predicted age, updated at most\\n        every 2 seconds\\n      </p>\\n      <p>\\n        {predictedAge\\n          ? `Predicted age: ${predictedAge}`\\n          : firstName\\n          ? 'No age result for entered name and location'\\n          : 'No name entered'}\\n      </p>\\n    </div>\\n  )\\n}\\n\\nexport default API\\n\"","import type { Meta, StoryObj } from '@storybook/react'\nimport API from './API'\nimport API_CODE from './API/API.tsx?raw'\nimport COUNTRIES from './API/assets/countries.json'\n\nexport const api: StoryObj<Meta<typeof API>> = {\n  parameters: {\n    layout: 'centered',\n    controls: { expanded: true },\n    docs: {\n      source: { code: API_CODE, language: 'tsx' },\n    },\n  },\n  argTypes: {\n    firstName: { type: 'string' },\n    countryCode: {\n      options: Object.keys(COUNTRIES),\n      control: {\n        type: 'select',\n        labels: COUNTRIES,\n      },\n    },\n  },\n  args: {\n    firstName: '',\n    countryCode: 'US',\n  },\n  render: args => <API {...args} />,\n}\n","export default \"/**\\n * `useThrottleFunction` hook type\\n *\\n * @export\\n * @template A extends unknown[]\\n * @template R\\n * @param {(...args: A) => R} func\\n * @param {number} delay\\n * @param {A} args\\n * @returns {R | null}\\n * @typedef {UseThrottleFunction}\\n */\\nexport declare type UseThrottleFunction = <A extends unknown[], R>(func: (...args: A) => R, delay: number, ...args: A) => R | null;\\n/**\\n * Ensures a function is called whenever its args change, at most once every `delay`ms. Immediately calls then function then re-calls\\n * the function and updates the result whenever the args change, at most once every `delay`ms.\\n *\\n * @template A extends unknown[]\\n * @template R\\n * @param {(...args: A) => R} func\\n * @param {number} delay\\n * @param {A} args\\n * @returns {R | null}\\n */\\ndeclare const useThrottleFunction: UseThrottleFunction;\\nexport default useThrottleFunction;\\n\"","import { Canvas, Meta, Source, Story } from '@storybook/addon-docs'\nimport * as stories from './stories'\nimport TYPES from '../../../../too-many-hooks/dist/useThrottleFunction.d.ts?raw'\n\n<Meta title=\"Example/UseThrottleFunction\" />\n\n# useThrottleFunction\n\nEnsures a function is called whenever its args change, at most once every `delay`ms.\nImmediately calls then function then re-calls the function and updates the result whenever the args change, at most once every `delay`ms.\n\n## Types\n\n<Source language=\"ts\" code={TYPES} />\n\n## Examples\n\n### API call\n\n<Canvas withSource=\"open\">\n  <Story name=\"API Call\" story={stories.api} />\n</Canvas>\n"],"names":["API","firstName","countryCode","predictedAge","setPredictedAge","useState","useThrottleFunction","params","res","data","jsxs","jsx","API_CODE","api","COUNTRIES","args","TYPES","MDXContent","props","MDXLayout","_provideComponents","_jsx","_createMdxContent","_components","_jsxs","_Fragment","Meta","Source","Canvas","Story","stories.api","_api_","componentMeta","__namedExportsOrder"],"mappings":"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"}